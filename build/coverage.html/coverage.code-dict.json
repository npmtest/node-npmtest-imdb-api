{"/home/travis/build/npmtest/node-npmtest-imdb-api/test.js":"/* istanbul instrument in package npmtest_imdb_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imdb-api/lib.npmtest_imdb_api.js":"/* istanbul instrument in package npmtest_imdb_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imdb_api = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imdb_api = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imdb-api/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imdb-api && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imdb_api */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imdb_api\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imdb_api.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_imdb_api.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imdb_api.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_imdb_api.__dirname + '/lib.npmtest_imdb_api.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imdb-api/node_modules/imdb-api/lib/imdb.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nvar util_1 = require(\"./util\");\nvar interfaces_1 = require(\"./interfaces\");\nvar es6promise = require(\"es6-promise\");\nvar rp = require(\"request-promise\");\nvar Promise = es6promise.Promise;\nvar omdbapi = \"https://www.omdbapi.com/\";\nvar trans_table = new util_1.Inverter({\n    \"genres\": \"Genre\",\n    \"languages\": \"Language\",\n    \"votes\": \"imdbVotes\",\n    \"rating\": \"imdbRating\"\n});\nvar Episode = (function () {\n    function Episode(obj, season) {\n        this.season = season;\n        for (var attr in obj) {\n            if (attr === \"Released\") {\n                var _a = obj[attr].split(\"-\"), year = _a[0], month = _a[1], day = _a[2];\n                this.released = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\n            }\n            else if (attr === \"Rating\") {\n                this[attr.toLowerCase()] = parseFloat(obj[attr]);\n            }\n            else if (attr === \"Episode\" || attr === \"Season\") {\n                this[attr.toLowerCase()] = parseInt(obj[attr]);\n            }\n            else if (attr === \"Title\") {\n                this.name = obj[attr];\n            }\n            else if (obj.hasOwnProperty(attr) && trans_table.get(attr) !== undefined) {\n                this[trans_table.get(attr)] = obj[attr];\n            }\n            else if (obj.hasOwnProperty(attr)) {\n                this[attr.toLowerCase()] = obj[attr];\n            }\n        }\n    }\n    return Episode;\n}());\nexports.Episode = Episode;\nvar Movie = (function () {\n    function Movie(obj) {\n        for (var attr in obj) {\n            if (attr === \"year\" || attr.toLowerCase() === \"year\") {\n                this[\"_year_data\"] = obj[attr];\n                if (!obj[attr].match(/\\d{4}[\\-–]\\d{4}/)) {\n                    this[attr.toLowerCase()] = parseInt(obj[attr]);\n                }\n            }\n            else if (attr === \"Released\") {\n                this.released = new Date(obj[attr]);\n            }\n            else if (attr === \"Rating\") {\n                this[attr.toLowerCase()] = parseFloat(obj[attr]);\n            }\n            else if (obj.hasOwnProperty(attr) && trans_table.get(attr) !== undefined) {\n                this[trans_table.get(attr)] = obj[attr];\n            }\n            else if (obj.hasOwnProperty(attr)) {\n                this[attr.toLowerCase()] = obj[attr];\n            }\n        }\n        this.series = this.type === \"movie\" ? false : true;\n        this.imdburl = \"https://www.imdb.com/title/\" + this.imdbid;\n    }\n    return Movie;\n}());\nexports.Movie = Movie;\nvar TVShow = (function (_super) {\n    __extends(TVShow, _super);\n    function TVShow(object) {\n        var _this = _super.call(this, object) || this;\n        _this._episodes = [];\n        var years = _this[\"_year_data\"].split(\"-\");\n        _this.start_year = parseInt(years[0]) ? parseInt(years[0]) : null;\n        _this.end_year = parseInt(years[1]) ? parseInt(years[1]) : null;\n        _this.totalseasons = parseInt(_this[\"totalseasons\"]);\n        return _this;\n    }\n    TVShow.prototype.episodes = function (cb) {\n        if (this._episodes.length !== 0) {\n            return cb(undefined, this._episodes);\n        }\n        var tvShow = this;\n        var funcs = [];\n        for (var i = 1; i <= tvShow.totalseasons; i++) {\n            funcs.push(rp({ \"qs\": { \"i\": tvShow.imdbid, \"r\": \"json\", \"Season\": i }, \"json\": true, \"url\": omdbapi }));\n        }\n        var prom = Promise.all(funcs)\n            .then(function (ep_data) {\n            var eps = [];\n            for (var key in ep_data) {\n                var datum = ep_data[key];\n                if (interfaces_1.isError(datum)) {\n                    var err = new ImdbError(datum.Error, undefined);\n                    if (cb) {\n                        return cb(err, undefined);\n                    }\n                    return Promise.reject(err);\n                }\n                else {\n                    var season = parseInt(datum.Season);\n                    for (var ep in datum.Episodes) {\n                        eps.push(new Episode(datum.Episodes[ep], season));\n                    }\n                }\n            }\n            tvShow._episodes = eps;\n            if (cb) {\n                return cb(undefined, eps);\n            }\n            return Promise.resolve(eps);\n        });\n        if (cb) {\n            prom[\"catch\"](function (err) {\n                return cb(err, undefined);\n            });\n        }\n        else {\n            return prom;\n        }\n    };\n    return TVShow;\n}(Movie));\nexports.TVShow = TVShow;\nvar ImdbError = (function () {\n    function ImdbError(message, movie) {\n        this.message = message;\n        this.movie = movie;\n        this.name = \"imdb api error\";\n    }\n    return ImdbError;\n}());\nexports.ImdbError = ImdbError;\nfunction getReq(req, cb) {\n    var responseData = \"\";\n    var qs = { plot: \"full\", r: \"json\", y: req.year };\n    if (req.name) {\n        qs[\"t\"] = req.name;\n    }\n    else if (req.id) {\n        qs[\"i\"] = req.id;\n    }\n    var prom = rp({ \"qs\": qs, url: omdbapi, json: true }).then(function (data) {\n        var ret;\n        if (interfaces_1.isError(data)) {\n            var err = new ImdbError(data.Error + \": \" + (req.name ? req.name : req.id), req);\n            if (cb) {\n                return cb(err, undefined);\n            }\n            else {\n                return Promise.reject(err);\n            }\n        }\n        else {\n            if (interfaces_1.isMovie(data)) {\n                ret = new Movie(data);\n            }\n            else if (interfaces_1.isTvshow(data)) {\n                ret = new TVShow(data);\n            }\n            else if (interfaces_1.isEpisode(data)) {\n                ret = new Episode(data, 30);\n            }\n            else {\n                var err = new ImdbError(\"type: \" + data.Type + \" not valid\", req);\n                if (cb) {\n                    return cb(err, undefined);\n                }\n                else {\n                    return Promise.reject(err);\n                }\n            }\n            if (cb) {\n                return cb(undefined, ret);\n            }\n            return Promise.resolve(ret);\n        }\n    });\n    if (cb) {\n        prom[\"catch\"](function (err) {\n            cb(err, undefined);\n        });\n    }\n    else {\n        return prom;\n    }\n}\nexports.getReq = getReq;\nfunction get(name, cb) {\n    return getReq({ id: undefined, name: name }, cb);\n}\nexports.get = get;\nfunction getById(imdbid, cb) {\n    return getReq({ id: imdbid, name: undefined }, cb);\n}\nexports.getById = getById;\n//# sourceMappingURL=imdb.js.map","/home/travis/build/npmtest/node-npmtest-imdb-api/node_modules/imdb-api/lib/util.js":"\"use strict\";\nexports.__esModule = true;\nvar Inverter = (function () {\n    function Inverter(obj) {\n        this.obj = obj;\n        this.rev_obj = {};\n        for (var attr in obj) {\n            this.rev_obj[obj[attr]] = attr;\n        }\n    }\n    Inverter.prototype.get = function (key) {\n        if (this.obj[key] !== undefined) {\n            return this.obj[key];\n        }\n        else if (this.rev_obj[key] !== undefined) {\n            return this.rev_obj[key];\n        }\n        return undefined;\n    };\n    return Inverter;\n}());\nexports.Inverter = Inverter;\n//# sourceMappingURL=util.js.map","/home/travis/build/npmtest/node-npmtest-imdb-api/node_modules/imdb-api/lib/interfaces.js":"\"use strict\";\nexports.__esModule = true;\nfunction isError(response) {\n    return response.Response === \"False\";\n}\nexports.isError = isError;\nfunction isTvshow(response) {\n    return response.Type === \"series\";\n}\nexports.isTvshow = isTvshow;\nfunction isMovie(response) {\n    return response.Type === \"movie\";\n}\nexports.isMovie = isMovie;\nfunction isEpisode(response) {\n    return response.Type === \"episode\";\n}\nexports.isEpisode = isEpisode;\n//# sourceMappingURL=interfaces.js.map"}